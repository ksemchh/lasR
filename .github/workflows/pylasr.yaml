on:
  push:
    branches: [ main, master, devel ]
    paths:
      - 'python/**'
      - 'src/**'
      - '.github/workflows/pylasr.yaml'
  pull_request:
    branches: '**'
    paths:
      - 'python/**'
      - 'src/**'
      - '.github/workflows/pylasr.yaml'
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'windows-latest' ]
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python on Ubuntu
      if: runner.os == 'Linux'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python & conda on Windows
      if: runner.os == 'Windows'
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        auto-activate-base: true
        python-version: ${{ matrix.python-version }}

    - name: Install GDAL/PROJ/GEOS on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gdal-bin libgdal-dev libgeos-dev libproj-dev \
          libsqlite3-dev libtbb-dev cmake build-essential

    - name: Install GDAL/PROJ/GEOS + pybind11 on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda install -y gdal proj geos cmake numpy pybind11

    - name: Install Python packages on Ubuntu
      if: runner.os == 'Linux'
      run: |
        pip install --upgrade pip setuptools wheel pybind11

    - name: Install Python packages on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        pip install --upgrade pip setuptools wheel

    - name: Configure pybind11 path on Ubuntu
      if: runner.os == 'Linux'
      run: |
        PYBIND11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")
        echo "pybind11_DIR=$PYBIND11_DIR" >> $GITHUB_ENV

    - name: Configure pybind11 path on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $p = python -c "import pybind11; print(pybind11.get_cmake_dir())"
        echo "pybind11_DIR=$p" >> $env:GITHUB_ENV

    - name: Build extension on Ubuntu
      if: runner.os == 'Linux'
      run: |
        cd python
        python setup.py build_ext --inplace -v
        find . -name "*.so" | head -20

    - name: Build extension on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd python
        python setup.py build_ext --inplace -v
        Get-ChildItem -Recurse -Filter *.pyd | Select-Object -First 20

    - name: Run tests on Ubuntu
      if: runner.os == 'Linux'
      run: |
        cd python
        export PYTHONPATH=$PWD:$PYTHONPATH
        python -c "import pylasr; print('OK')"
        python tests/run_tests.py

    - name: Run tests on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd python
        $Env:PYTHONPATH = "$PWD;$Env:PYTHONPATH"
        python -c "import pylasr; Write-Output 'OK'"
        python tests/run_tests.py

    - name: Quick smoke test
      if: runner.os == 'Linux'
      shell: bash
      working-directory: python
      run: |
        export PYTHONPATH=$PWD:$PYTHONPATH
        python tests/run_tests.py --quick