on:
  push:
    branches: [ main, master, devel ]
    paths:
      - 'python/**'
      - 'src/**'
      - '.github/workflows/pylasr.yaml'
  pull_request:
    branches: '**'
    paths:
      - 'python/**'
      - 'src/**'
      - '.github/workflows/pylasr.yaml'
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest' ]
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install GDAL/PROJ/GEOS on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gdal-bin libgdal-dev libgeos-dev libproj-dev \
          libsqlite3-dev libtbb-dev cmake build-essential

    - name: Install GDAL/PROJ/GEOS on macOS
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install libomp gdal geos proj sqlite3 tbb cmake

    - name: Install GDAL/PROJ/GEOS via OSGeo4W on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Invoke-WebRequest `
          -Uri 'https://download.osgeo.org/osgeo4w/osgeo4w-setup-v2.exe' `
          -OutFile osgeo4w-setup.exe

        Start-Process `
          -FilePath .\osgeo4w-setup.exe `
          -ArgumentList @(
            '-q','-k','-a','x86_64',
            '-P','gdal,proj,geos,sqlite3,tbb,cmake',
            '-s','https://download.osgeo.org/osgeo4w/v2'
          ) `
          -Wait -NoNewWindow

    - name: Add OSGeo4W to PATH on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $osgeo = 'C:\OSGeo4W'
        $env:PATH += ";$osgeo\bin;$osgeo\usr\bin"
        $env:INCLUDE = "${osgeo}\include;" + ($env:INCLUDE -split ';' | Where { $_ }) -join ';'
        $env:LIB     = "${osgeo}\lib;"     + ($env:LIB     -split ';' | Where { $_ }) -join ';'

        gdalinfo --version
        projinfo --version

    - name: Install Python packages on Ubuntu/macOS
      if: runner.os != 'Windows'
      run: |
        pip install --upgrade pip setuptools wheel pybind11

    - name: Install Python packages on Windows
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel pybind11

    - name: Configure pybind11 path on Ubuntu/macOS
      if: runner.os != 'Windows'
      run: |
        PYBIND11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")
        echo "pybind11_DIR=$PYBIND11_DIR" >> $GITHUB_ENV

    - name: Configure pybind11 path  on Windows
      if: runner.os == 'Windows'
      run: |
        PYBIND11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")
        echo "pybind11_DIR=$PYBIND11_DIR" >> $GITHUB_ENV

    - name: Build extension
      run: |
        cd python
        python setup.py build_ext --inplace -vvv
        find . -name "*.so" | head -20

    - name: Run tests
      run: |
        cd python
        export PYTHONPATH=$PWD:$PYTHONPATH
        python -c "import pylasr; print('OK')"
        python tests/run_tests.py

    - name: Quick smoke test
      if: runner.os!= 'Windows'
      shell: bash
      working-directory: python
      run: |
        export PYTHONPATH=$PWD:$PYTHONPATH
        python tests/run_tests.py --quick