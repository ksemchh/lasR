on:
  push:
    branches: [ main, master, devel ]
    paths:
      - 'python/**'
      - 'src/**'
      - '.github/workflows/pylasr.yaml'
  pull_request:
    branches: '**'
    paths:
      - 'python/**'
      - 'src/**'
      - '.github/workflows/pylasr.yaml'
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gdal-bin libgdal-dev libgeos-dev libproj-dev \
          libsqlite3-dev libtbb-dev cmake build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install gdal geos proj sqlite tbb cmake libomp
        export CPPFLAGS="-I$(brew --prefix libomp)/include"
        export LDFLAGS="-L$(brew --prefix libomp)/lib"
        mkdir build && cd build
        cmake .. \
          -DCMAKE_CXX_FLAGS="-Xpreprocessor -fopenmp" \
          -DCMAKE_EXE_LINKER_FLAGS="-lomp"
        cmake --build .

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        choco install sqlite -y
        vcpkg install gdal:x64-windows
        vcpkg integrate install

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel numpy pybind11

    - name: Configure pybind11 path (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        PYBIND11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")
        echo "pybind11_DIR=$PYBIND11_DIR" >> $GITHUB_ENV

    - name: Configure pybind11 path (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $dir = python -c "import pybind11; print(pybind11.get_cmake_dir())"
        Add-Content -Path $Env:GITHUB_ENV -Value "pybind11_DIR=$dir"
        cmake -S . -B build \
          -DGDAL_INCLUDE_DIR="C:/path/to/gdal/include" \
          -DGDAL_LIBRARY="C:/path/to/gdal/lib/gdal.lib"
        cmake --build build

    - name: Build Python extension (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      working-directory: python
      run: |
        python setup.py build_ext --inplace -v
        echo "Built modules:"
        find . -name "*.so" | head -20

    - name: Build Python extension (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      working-directory: python
      run: |
        python setup.py build_ext --inplace -v
        Write-Host "Built modules:"
        Get-ChildItem -Recurse -Filter *.pyd | Select-Object -First 20

    - name: Run tests (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      working-directory: python
      run: |
        export PYTHONPATH=$PWD:$PYTHONPATH
        python -c "import pylasr; print('pylasr imported successfully')"
        python tests/run_tests.py

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      working-directory: python
      run: |
        $env:PYTHONPATH = "$PWD;$env:PYTHONPATH"
        python -c "import pylasr; Write-Host 'pylasr imported successfully'"
        python tests/run_tests.py

    - name: Quick smoke test (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      working-directory: python
      run: |
        export PYTHONPATH=$PWD:$PYTHONPATH
        python tests/run_tests.py --quick

    - name: Quick smoke test (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      working-directory: python
      run: |
        $env:PYTHONPATH = "$PWD;$env:PYTHONPATH"
        python tests/run_tests.py --quick