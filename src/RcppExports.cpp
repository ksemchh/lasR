// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_process
SEXP cpp_process(SEXP args, SEXP async);
RcppExport SEXP _lasR_cpp_process(SEXP argsSEXP, SEXP asyncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type args(argsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type async(asyncSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_process(args, async));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_utils();
RcppExport SEXP _rcpp_module_boot_stages();
RcppExport SEXP _rcpp_module_boot_operations();

static const R_CallMethodDef CallEntries[] = {
    {"_lasR_cpp_process", (DL_FUNC) &_lasR_cpp_process, 2},
    {"_rcpp_module_boot_utils", (DL_FUNC) &_rcpp_module_boot_utils, 0},
    {"_rcpp_module_boot_stages", (DL_FUNC) &_rcpp_module_boot_stages, 0},
    {"_rcpp_module_boot_operations", (DL_FUNC) &_rcpp_module_boot_operations, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_lasR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
